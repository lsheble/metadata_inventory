[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Trying out the quarto blog framework!"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Metadata Inventory",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Author\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n  \n\n\n\n\nColumn Metadata\n\n\n\n\n\n\n\nmetadata\n\n\ninventory\n\n\ncolumns\n\n\nfields\n\n\nupdate\n\n\n\n\n\n\n\n\n\n\n\nNov 28, 2023\n\n\nL Sheble\n\n\n\n\n\n\n  \n\n\n\n\nData Set Metadata\n\n\n\n\n\n\n\nmetadata\n\n\ninventory\n\n\ndataset records\n\n\n\n\n\n\n\n\n\n\n\nNov 28, 2023\n\n\nL Sheble\n\n\n\n\n\n\n  \n\n\n\n\nColumn Metadata\n\n\n\n\n\n\n\nmetadata\n\n\ninventory\n\n\ncolumns\n\n\nfields\n\n\nupdate\n\n\n\n\n\n\n\n\n\n\n\nOct 27, 2023\n\n\nL Sheble\n\n\n\n\n\n\n  \n\n\n\n\nData Set Metadata\n\n\n\n\n\n\n\nmetadata\n\n\ninventory\n\n\ndataset records\n\n\n\n\n\n\n\n\n\n\n\nOct 27, 2023\n\n\nL Sheble\n\n\n\n\n\n\n  \n\n\n\n\nColumn Metadata\n\n\n\n\n\n\n\nmetadata\n\n\ninventory\n\n\ncolumns\n\n\nfields\n\n\nupdate\n\n\n\n\n\n\n\n\n\n\n\nSep 26, 2023\n\n\nL Sheble\n\n\n\n\n\n\n  \n\n\n\n\nData Set Metadata\n\n\n\n\n\n\n\nmetadata\n\n\ninventory\n\n\ndataset records\n\n\n\n\n\n\n\n\n\n\n\nSep 26, 2023\n\n\nL Sheble\n\n\n\n\n\n\n  \n\n\n\n\nColumn Metadata\n\n\n\n\n\n\n\nmetadata\n\n\ninventory\n\n\nto do\n\n\nupdate\n\n\n\n\n\n\n\n\n\n\n\nAug 28, 2023\n\n\nL Sheble\n\n\n\n\n\n\n  \n\n\n\n\nData Set Metadata\n\n\n\n\n\n\n\nmetadata\n\n\ninventory\n\n\nto do\n\n\n\n\n\n\n\n\n\n\n\nAug 28, 2023\n\n\nL Sheble\n\n\n\n\n\n\n  \n\n\n\n\nData Set Metadata\n\n\n\n\n\n\n\nmetadata\n\n\ninventory\n\n\nto do\n\n\n\n\n\n\n\n\n\n\n\nJun 20, 2023\n\n\nL Sheble\n\n\n\n\n\n\n  \n\n\n\n\nColumn Metadata\n\n\n\n\n\n\n\nmetadata\n\n\ninventory\n\n\nto do\n\n\n\n\n\n\n\n\n\n\n\nJun 16, 2023\n\n\nL Sheble\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/column-metadata/index.html",
    "href": "posts/column-metadata/index.html",
    "title": "Column Metadata",
    "section": "",
    "text": "Filtered out rows that matched\n\ntype = “esriFieldTypeOID”\nfeature_service_name = “Review”\n\nFuture\n\njoin on feature_service_name to identify which are owned by OpenDataAdmin and which are not\nmaybe drop deprecated data sets\n\n\n\nCode\nmetadata_columns_all %&gt;%\n  filter(type != \"esriFieldTypeOID\") %&gt;%\n  filter(feature_service_name != \"Review\") %&gt;%\n  mutate(column_label = if_else(field_name != field_alias, field_alias, NA)) %&gt;%\n  select(-c(feature_service_name, layer_name, field_name, field_alias, type)) %&gt;%\n  skim(.data_name = \"column-level metadata\")\n\n\n\nData summary\n\n\nName\ncolumn-level metadata\n\n\nNumber of rows\n1784\n\n\nNumber of columns\n3\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\ndescription\n1529\n0.14\n0\n510\n15\n192\n0\n\n\nfield_value_type\n1529\n0.14\n0\n19\n192\n11\n0\n\n\ncolumn_label\n1327\n0.26\n0\n48\n3\n310\n0\n\n\n\n\n\nKey\n\nn_missing: Sum of NA and NULL (i.e. missing) values.\ncomplete rate: Sum of values that are not NA or NULL (i.e., missing) values.\nmin: minimum number of characters.\nmax: maximum number of characters.\nempty: number of blank values - or empty strings (““).\nn_unique: number of unique values.\nwhitespace: number of rows containing only whitespace values using the s+ regular expression."
  },
  {
    "objectID": "posts/column-metadata/index.html#overview-all-columns",
    "href": "posts/column-metadata/index.html#overview-all-columns",
    "title": "Column Metadata",
    "section": "",
    "text": "Filtered out rows that matched\n\ntype = “esriFieldTypeOID”\nfeature_service_name = “Review”\n\nFuture\n\njoin on feature_service_name to identify which are owned by OpenDataAdmin and which are not\nmaybe drop deprecated data sets\n\n\n\nCode\nmetadata_columns_all %&gt;%\n  filter(type != \"esriFieldTypeOID\") %&gt;%\n  filter(feature_service_name != \"Review\") %&gt;%\n  mutate(column_label = if_else(field_name != field_alias, field_alias, NA)) %&gt;%\n  select(-c(feature_service_name, layer_name, field_name, field_alias, type)) %&gt;%\n  skim(.data_name = \"column-level metadata\")\n\n\n\nData summary\n\n\nName\ncolumn-level metadata\n\n\nNumber of rows\n1784\n\n\nNumber of columns\n3\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\ndescription\n1529\n0.14\n0\n510\n15\n192\n0\n\n\nfield_value_type\n1529\n0.14\n0\n19\n192\n11\n0\n\n\ncolumn_label\n1327\n0.26\n0\n48\n3\n310\n0\n\n\n\n\n\nKey\n\nn_missing: Sum of NA and NULL (i.e. missing) values.\ncomplete rate: Sum of values that are not NA or NULL (i.e., missing) values.\nmin: minimum number of characters.\nmax: maximum number of characters.\nempty: number of blank values - or empty strings (““).\nn_unique: number of unique values.\nwhitespace: number of rows containing only whitespace values using the s+ regular expression."
  },
  {
    "objectID": "posts/column-metadata/index.html#column-level-metadata-grouped-by-data-set",
    "href": "posts/column-metadata/index.html#column-level-metadata-grouped-by-data-set",
    "title": "Column Metadata",
    "section": "Column-level Metadata, Grouped by Data Set",
    "text": "Column-level Metadata, Grouped by Data Set\nColumns counts summarized by data set to identify the number of columns (‘column_count’), the number of columns that do not yet have descriptions (‘to_describe’) and the proportion of columns that have been described.\nThe identifier column created and assigned by Esri (column data type = “esriFieldTypeOID”) is not included in the counts.\n\n\nCode\nmetadata_columns_all %&gt;%\n # select(feature_service_name, field_name, field_alias, field_value_type, description) %&gt;%\n  group_by(feature_service_name) %&gt;%\n#  tally(name = \"column count\") %&gt;%\n  summarise(column_count = n()-1, to_describe = sum(is.na(description))-1 , pct_complete = round((((column_count-to_describe)/column_count)*100), digits = 2), .groups = 'keep') %&gt;%\n  datatable()\n\n\n\n\n\n\n\nCode\n#  summarise(descriptions = n(description))"
  },
  {
    "objectID": "posts/column-metadata/index.html#search-column-level-metadata",
    "href": "posts/column-metadata/index.html#search-column-level-metadata",
    "title": "Column Metadata",
    "section": "Search Column-level Metadata",
    "text": "Search Column-level Metadata\nTable that lists the data set, field name, field alias, field value type, and description for each column - or attribute - in odp data sets. Each row is a data set attribute (a.k.a. ‘column’).\n\n\nCode\nmetadata_columns_all %&gt;%\n  select(feature_service_name, field_name, field_alias, field_value_type, description) %&gt;%\n  arrange(feature_service_name) %&gt;%\n  datatable()"
  },
  {
    "objectID": "posts/data-set-metadata/index.html",
    "href": "posts/data-set-metadata/index.html",
    "title": "Data Set Metadata",
    "section": "",
    "text": "Code\nmetadata_datasets_all &lt;- \n  tbl(con, in_schema(\"dbt_metadata\", \"datasets\")) %&gt;%\n# select(layer_name, type, service_item_id, description, ) %&gt;%\n#  arrange(layer_name) %&gt;%\n  collect()\nCode\nmetadata_datasets &lt;- metadata_datasets_all %&gt;% \n  mutate(desc_words = str_count(description, \"\\\\w+\"),\n                                 snippet_words = str_count(snippet, \"\\\\w+\"),\n                                 credit_words = str_count(access_information, \"\\\\w+\"),\n                                 tags = str_split(str_remove_all(tags, '\\\\{|\\\\}'), \",\")) %&gt;%\n  mutate(tag_words = (unlist(lengths(tags)))) %&gt;%\n  select(feature_service_name, owner, desc_words, snippet_words, tag_words, credit_words, creation_date) %&gt;%\n  arrange(feature_service_name)"
  },
  {
    "objectID": "posts/data-set-metadata/index.html#all-data-sets",
    "href": "posts/data-set-metadata/index.html#all-data-sets",
    "title": "Data Set Metadata",
    "section": "All Data Sets",
    "text": "All Data Sets\nItem count: 153\n\n\nCode\nlibrary(skimr)\n\nmetadata_datasets %&gt;%\n    skim(.data_name = \"dataset-level metadata\")\n\n\n\nData summary\n\n\nName\ndataset-level metadata\n\n\nNumber of rows\n153\n\n\nNumber of columns\n7\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\nnumeric\n4\n\n\nPOSIXct\n1\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nfeature_service_name\n0\n1\n3\n58\n0\n153\n0\n\n\nowner\n0\n1\n15\n32\n0\n16\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\ndesc_words\n14\n0.91\n60.55\n95.04\n5\n13\n29\n74\n751\n▇▁▁▁▁\n\n\nsnippet_words\n0\n1.00\n11.15\n7.04\n0\n6\n10\n14\n38\n▆▇▃▁▁\n\n\ntag_words\n0\n1.00\n3.41\n1.38\n1\n3\n3\n4\n9\n▃▇▂▁▁\n\n\ncredit_words\n0\n1.00\n2.09\n4.37\n0\n0\n0\n3\n38\n▇▁▁▁▁\n\n\n\nVariable type: POSIXct\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nmedian\nn_unique\n\n\n\n\ncreation_date\n0\n1\n2016-07-01 16:19:54\n2023-04-27 20:25:02\n2019-09-30 20:12:31\n148\n\n\n\n\n\nCode\n#  filter(type != \"esriFieldTypeOID\") %&gt;%\n#  filter(feature_service_name != \"Review\") %&gt;%\n#  mutate(column_label = if_else(field_name != field_alias, field_alias, NA)) %&gt;%\n#  select(-c(feature_service_name, layer_name, field_name, field_alias, type)) %&gt;%\n#  skim(.data_name = \"column-level metadata\")"
  },
  {
    "objectID": "posts/data-set-metadata/index.html#opendataadmin-data-sets",
    "href": "posts/data-set-metadata/index.html#opendataadmin-data-sets",
    "title": "Data Set Metadata",
    "section": "OpenDataAdmin Data Sets",
    "text": "OpenDataAdmin Data Sets\n\n\nCode\nmetadata_datasets %&gt;%\n  filter(owner == \"OpenDataAdmin_detroitmi\") %&gt;%\n  select(-owner) %&gt;%\n #  knitr::kable()\n  datatable()"
  },
  {
    "objectID": "posts/data-set-metadata/index.html#data-sets-owned-by-others",
    "href": "posts/data-set-metadata/index.html#data-sets-owned-by-others",
    "title": "Data Set Metadata",
    "section": "Data Sets owned by others",
    "text": "Data Sets owned by others\n\n\nCode\nmetadata_datasets %&gt;%\n  filter(owner != \"OpenDataAdmin_detroitmi\") %&gt;%\n # select(-owner) %&gt;%\n #  knitr::kable()\n  datatable()"
  },
  {
    "objectID": "posts/column-metadata-2023-07-07/index.html",
    "href": "posts/column-metadata-2023-07-07/index.html",
    "title": "Column Metadata",
    "section": "",
    "text": "Filtered out rows that matched\n\ntype = “esriFieldTypeOID”\nfeature_service_name = “Review”\n\nFuture\n\njoin on feature_service_name to identify which are owned by OpenDataAdmin and which are not\nmaybe drop deprecated data sets\n\n\n\nCode\nmetadata_columns_all %&gt;%\n  filter(type != \"esriFieldTypeOID\") %&gt;%\n  filter(feature_service_name != \"Review\") %&gt;%\n  mutate(column_label = if_else(field_name != field_alias, field_alias, NA)) %&gt;%\n  select(-c(feature_service_name, layer_name, field_name, field_alias, type)) %&gt;%\n  skim(.data_name = \"column-level metadata\")\n\n\n\nData summary\n\n\nName\ncolumn-level metadata\n\n\nNumber of rows\n1784\n\n\nNumber of columns\n3\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\ndescription\n1529\n0.14\n0\n510\n15\n192\n0\n\n\nfield_value_type\n1529\n0.14\n0\n19\n192\n11\n0\n\n\ncolumn_label\n1327\n0.26\n0\n48\n3\n310\n0\n\n\n\n\n\nKey\n\nn_missing: Sum of NA and NULL (i.e. missing) values.\ncomplete rate: Sum of values that are not NA or NULL (i.e., missing) values.\nmin: minimum number of characters.\nmax: maximum number of characters.\nempty: number of blank values - or empty strings (““).\nn_unique: number of unique values.\nwhitespace: number of rows containing only whitespace values using the s+ regular expression."
  },
  {
    "objectID": "posts/column-metadata-2023-07-07/index.html#overview-all-columns",
    "href": "posts/column-metadata-2023-07-07/index.html#overview-all-columns",
    "title": "Column Metadata",
    "section": "",
    "text": "Filtered out rows that matched\n\ntype = “esriFieldTypeOID”\nfeature_service_name = “Review”\n\nFuture\n\njoin on feature_service_name to identify which are owned by OpenDataAdmin and which are not\nmaybe drop deprecated data sets\n\n\n\nCode\nmetadata_columns_all %&gt;%\n  filter(type != \"esriFieldTypeOID\") %&gt;%\n  filter(feature_service_name != \"Review\") %&gt;%\n  mutate(column_label = if_else(field_name != field_alias, field_alias, NA)) %&gt;%\n  select(-c(feature_service_name, layer_name, field_name, field_alias, type)) %&gt;%\n  skim(.data_name = \"column-level metadata\")\n\n\n\nData summary\n\n\nName\ncolumn-level metadata\n\n\nNumber of rows\n1784\n\n\nNumber of columns\n3\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\ndescription\n1529\n0.14\n0\n510\n15\n192\n0\n\n\nfield_value_type\n1529\n0.14\n0\n19\n192\n11\n0\n\n\ncolumn_label\n1327\n0.26\n0\n48\n3\n310\n0\n\n\n\n\n\nKey\n\nn_missing: Sum of NA and NULL (i.e. missing) values.\ncomplete rate: Sum of values that are not NA or NULL (i.e., missing) values.\nmin: minimum number of characters.\nmax: maximum number of characters.\nempty: number of blank values - or empty strings (““).\nn_unique: number of unique values.\nwhitespace: number of rows containing only whitespace values using the s+ regular expression."
  },
  {
    "objectID": "posts/column-metadata-2023-07-07/index.html#column-level-metadata-grouped-by-data-set",
    "href": "posts/column-metadata-2023-07-07/index.html#column-level-metadata-grouped-by-data-set",
    "title": "Column Metadata",
    "section": "Column-level Metadata, Grouped by Data Set",
    "text": "Column-level Metadata, Grouped by Data Set\nColumns counts summarized by data set to identify the number of columns (‘column_count’), the number of columns that do not yet have descriptions (‘to_describe’) and the proportion of columns that have been described.\nThe identifier column created and assigned by Esri (column data type = “esriFieldTypeOID”) is not included in the counts.\n\n\nCode\nmetadata_columns_all %&gt;%\n # select(feature_service_name, field_name, field_alias, field_value_type, description) %&gt;%\n  group_by(feature_service_name) %&gt;%\n#  tally(name = \"column count\") %&gt;%\n  summarise(column_count = n()-1, to_describe = sum(is.na(description))-1 , pct_complete = round((((column_count-to_describe)/column_count)*100), digits = 2), .groups = 'keep') %&gt;%\n  datatable()\n\n\n\n\n\n\n\nCode\n#  summarise(descriptions = n(description))"
  },
  {
    "objectID": "posts/column-metadata-2023-07-07/index.html#search-column-level-metadata",
    "href": "posts/column-metadata-2023-07-07/index.html#search-column-level-metadata",
    "title": "Column Metadata",
    "section": "Search Column-level Metadata",
    "text": "Search Column-level Metadata\nTable that lists the data set, field name, field alias, field value type, and description for each column - or attribute - in odp data sets. Each row is a data set attribute (a.k.a. ‘column’).\n\n\nCode\nmetadata_columns_all %&gt;%\n  select(feature_service_name, field_name, field_alias, field_value_type, description) %&gt;%\n  arrange(feature_service_name) %&gt;%\n  datatable()"
  },
  {
    "objectID": "posts/column-metadata-2023-08-09/index.html#overview-all-columns",
    "href": "posts/column-metadata-2023-08-09/index.html#overview-all-columns",
    "title": "Column Metadata",
    "section": "Overview: All Columns",
    "text": "Overview: All Columns\nFiltered out rows that matched\n\ntype = “esriFieldTypeOID”\nfeature_service_name = “Review”\n\nFuture\n\njoin on feature_service_name to identify which are owned by OpenDataAdmin and which are not\nmaybe drop deprecated data sets\n\n\n\nCode\nmetadata_columns_all %&gt;%\n  filter(type != \"esriFieldTypeOID\") %&gt;%\n  filter(feature_service_name != \"Review\") %&gt;%\n  mutate(column_label = if_else(field_name != field_alias, field_alias, NA)) %&gt;%\n  select(-c(feature_service_name, layer_name, field_name, field_alias, type)) %&gt;%\n  skim(.data_name = \"column-level metadata\")\n\n\n\nData summary\n\n\nName\ncolumn-level metadata\n\n\nNumber of rows\n1784\n\n\nNumber of columns\n3\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\ndescription\n1529\n0.14\n0\n510\n15\n192\n0\n\n\nfield_value_type\n1529\n0.14\n0\n19\n192\n11\n0\n\n\ncolumn_label\n1327\n0.26\n0\n48\n3\n310\n0\n\n\n\n\n\nKey\n\nn_missing: Sum of NA and NULL (i.e. missing) values.\ncomplete rate: Sum of values that are not NA or NULL (i.e., missing) values.\nmin: minimum number of characters.\nmax: maximum number of characters.\nempty: number of blank values - or empty strings (““).\nn_unique: number of unique values.\nwhitespace: number of rows containing only whitespace values using the s+ regular expression."
  },
  {
    "objectID": "posts/column-metadata-2023-08-09/index.html#column-level-metadata-grouped-by-data-set",
    "href": "posts/column-metadata-2023-08-09/index.html#column-level-metadata-grouped-by-data-set",
    "title": "Column Metadata",
    "section": "Column-level Metadata, Grouped by Data Set",
    "text": "Column-level Metadata, Grouped by Data Set\nColumns counts summarized by data set to identify the number of columns (‘column_count’), the number of columns that do not yet have descriptions (‘to_describe’) and the proportion of columns that have been described.\nThe identifier column created and assigned by Esri (column data type = “esriFieldTypeOID”) is not included in the counts.\n\n\nCode\nmetadata_columns_all %&gt;%\n # select(feature_service_name, field_name, field_alias, field_value_type, description) %&gt;%\n  group_by(feature_service_name) %&gt;%\n#  tally(name = \"column count\") %&gt;%\n  summarise(column_count = n()-1, to_describe = sum(is.na(description))-1 , pct_complete = round((((column_count-to_describe)/column_count)*100), digits = 2), .groups = 'keep') %&gt;%\n  datatable()\n\n\n\n\n\n\n\nCode\n#  summarise(descriptions = n(description))"
  },
  {
    "objectID": "posts/column-metadata-2023-08-09/index.html#search-column-level-metadata",
    "href": "posts/column-metadata-2023-08-09/index.html#search-column-level-metadata",
    "title": "Column Metadata",
    "section": "Search Column-level Metadata",
    "text": "Search Column-level Metadata\nTable that lists the data set, field name, field alias, field value type, and description for each column - or attribute - in odp data sets. Each row is a data set attribute (a.k.a. ‘column’).\n\n\nCode\nmetadata_columns_all %&gt;%\n  select(feature_service_name, field_name, field_alias, field_value_type, description) %&gt;%\n  arrange(feature_service_name) %&gt;%\n  datatable()"
  },
  {
    "objectID": "posts/column-metadata-2023-07-31/index.html#overview-all-columns",
    "href": "posts/column-metadata-2023-07-31/index.html#overview-all-columns",
    "title": "Column Metadata",
    "section": "Overview: All Columns",
    "text": "Overview: All Columns\nFiltered out rows that matched\n\ntype = “esriFieldTypeOID”\nfeature_service_name = “Review”\n\nFuture\n\njoin on feature_service_name to identify which are owned by OpenDataAdmin and which are not\nmaybe drop deprecated data sets\n\n\n\nCode\nmetadata_columns_all %&gt;%\n  filter(type != \"esriFieldTypeOID\") %&gt;%\n  filter(feature_service_name != \"Review\") %&gt;%\n  mutate(column_label = if_else(field_name != field_alias, field_alias, NA)) %&gt;%\n  select(-c(feature_service_name, layer_name, field_name, field_alias, type)) %&gt;%\n  skim(.data_name = \"column-level metadata\")\n\n\n\nData summary\n\n\nName\ncolumn-level metadata\n\n\nNumber of rows\n1784\n\n\nNumber of columns\n3\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\ndescription\n1529\n0.14\n0\n510\n15\n192\n0\n\n\nfield_value_type\n1529\n0.14\n0\n19\n192\n11\n0\n\n\ncolumn_label\n1327\n0.26\n0\n48\n3\n310\n0\n\n\n\n\n\nKey\n\nn_missing: Sum of NA and NULL (i.e. missing) values.\ncomplete rate: Sum of values that are not NA or NULL (i.e., missing) values.\nmin: minimum number of characters.\nmax: maximum number of characters.\nempty: number of blank values - or empty strings (““).\nn_unique: number of unique values.\nwhitespace: number of rows containing only whitespace values using the s+ regular expression."
  },
  {
    "objectID": "posts/column-metadata-2023-07-31/index.html#column-level-metadata-grouped-by-data-set",
    "href": "posts/column-metadata-2023-07-31/index.html#column-level-metadata-grouped-by-data-set",
    "title": "Column Metadata",
    "section": "Column-level Metadata, Grouped by Data Set",
    "text": "Column-level Metadata, Grouped by Data Set\nColumns counts summarized by data set to identify the number of columns (‘column_count’), the number of columns that do not yet have descriptions (‘to_describe’) and the proportion of columns that have been described.\nThe identifier column created and assigned by Esri (column data type = “esriFieldTypeOID”) is not included in the counts.\n\n\nCode\nmetadata_columns_all %&gt;%\n # select(feature_service_name, field_name, field_alias, field_value_type, description) %&gt;%\n  group_by(feature_service_name) %&gt;%\n#  tally(name = \"column count\") %&gt;%\n  summarise(column_count = n()-1, to_describe = sum(is.na(description))-1 , pct_complete = round((((column_count-to_describe)/column_count)*100), digits = 2), .groups = 'keep') %&gt;%\n  datatable()\n\n\n\n\n\n\n\nCode\n#  summarise(descriptions = n(description))"
  },
  {
    "objectID": "posts/column-metadata-2023-07-31/index.html#search-column-level-metadata",
    "href": "posts/column-metadata-2023-07-31/index.html#search-column-level-metadata",
    "title": "Column Metadata",
    "section": "Search Column-level Metadata",
    "text": "Search Column-level Metadata\nTable that lists the data set, field name, field alias, field value type, and description for each column - or attribute - in odp data sets. Each row is a data set attribute (a.k.a. ‘column’).\n\n\nCode\nmetadata_columns_all %&gt;%\n  select(feature_service_name, field_name, field_alias, field_value_type, description) %&gt;%\n  arrange(feature_service_name) %&gt;%\n  datatable()"
  },
  {
    "objectID": "posts/data-set-metadata-2023-08-09/index.html",
    "href": "posts/data-set-metadata-2023-08-09/index.html",
    "title": "Data Set Metadata",
    "section": "",
    "text": "Code\nmetadata_datasets_all &lt;- \n  tbl(con, in_schema(\"dbt_metadata\", \"datasets\")) %&gt;%\n# select(layer_name, type, service_item_id, description, ) %&gt;%\n#  arrange(layer_name) %&gt;%\n  collect()\n\n\n\n\nCode\nmetadata_datasets &lt;- metadata_datasets_all %&gt;% \n  mutate(desc_words = str_count(description, \"\\\\w+\"),\n                                 snippet_words = str_count(snippet, \"\\\\w+\"),\n                                 credit_words = str_count(access_information, \"\\\\w+\"),\n                                 tags = str_split(str_remove_all(tags, '\\\\{|\\\\}'), \",\")) %&gt;%\n  mutate(tag_words = (unlist(lengths(tags)))) %&gt;%\n  select(feature_service_name, owner, desc_words, snippet_words, tag_words, credit_words, creation_date) %&gt;%\n  arrange(feature_service_name)"
  },
  {
    "objectID": "posts/data-set-metadata-2023-08-09/index.html#data-has-was-updated-7-31-2023",
    "href": "posts/data-set-metadata-2023-08-09/index.html#data-has-was-updated-7-31-2023",
    "title": "Data Set Metadata",
    "section": "",
    "text": "Code\nmetadata_datasets_all &lt;- \n  tbl(con, in_schema(\"dbt_metadata\", \"datasets\")) %&gt;%\n# select(layer_name, type, service_item_id, description, ) %&gt;%\n#  arrange(layer_name) %&gt;%\n  collect()\n\n\n\n\nCode\nmetadata_datasets &lt;- metadata_datasets_all %&gt;% \n  mutate(desc_words = str_count(description, \"\\\\w+\"),\n                                 snippet_words = str_count(snippet, \"\\\\w+\"),\n                                 credit_words = str_count(access_information, \"\\\\w+\"),\n                                 tags = str_split(str_remove_all(tags, '\\\\{|\\\\}'), \",\")) %&gt;%\n  mutate(tag_words = (unlist(lengths(tags)))) %&gt;%\n  select(feature_service_name, owner, desc_words, snippet_words, tag_words, credit_words, creation_date) %&gt;%\n  arrange(feature_service_name)"
  },
  {
    "objectID": "posts/data-set-metadata-2023-08-09/index.html#all-data-sets",
    "href": "posts/data-set-metadata-2023-08-09/index.html#all-data-sets",
    "title": "Data Set Metadata",
    "section": "All Data Sets",
    "text": "All Data Sets\nItem count: 153\n\n\nCode\nlibrary(skimr)\n\nmetadata_datasets %&gt;%\n    skim(.data_name = \"dataset-level metadata\")\n\n\n\nData summary\n\n\nName\ndataset-level metadata\n\n\nNumber of rows\n153\n\n\nNumber of columns\n7\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\nnumeric\n4\n\n\nPOSIXct\n1\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nfeature_service_name\n0\n1\n3\n58\n0\n153\n0\n\n\nowner\n0\n1\n15\n32\n0\n16\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\ndesc_words\n14\n0.91\n60.55\n95.04\n5\n13\n29\n74\n751\n▇▁▁▁▁\n\n\nsnippet_words\n0\n1.00\n11.15\n7.04\n0\n6\n10\n14\n38\n▆▇▃▁▁\n\n\ntag_words\n0\n1.00\n3.41\n1.38\n1\n3\n3\n4\n9\n▃▇▂▁▁\n\n\ncredit_words\n0\n1.00\n2.09\n4.37\n0\n0\n0\n3\n38\n▇▁▁▁▁\n\n\n\nVariable type: POSIXct\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nmedian\nn_unique\n\n\n\n\ncreation_date\n0\n1\n2016-07-01 16:19:54\n2023-04-27 20:25:02\n2019-09-30 20:12:31\n148\n\n\n\n\n\nCode\n#  filter(type != \"esriFieldTypeOID\") %&gt;%\n#  filter(feature_service_name != \"Review\") %&gt;%\n#  mutate(column_label = if_else(field_name != field_alias, field_alias, NA)) %&gt;%\n#  select(-c(feature_service_name, layer_name, field_name, field_alias, type)) %&gt;%\n#  skim(.data_name = \"column-level metadata\")"
  },
  {
    "objectID": "posts/data-set-metadata-2023-08-09/index.html#opendataadmin-data-sets",
    "href": "posts/data-set-metadata-2023-08-09/index.html#opendataadmin-data-sets",
    "title": "Data Set Metadata",
    "section": "OpenDataAdmin Data Sets",
    "text": "OpenDataAdmin Data Sets\n\n\nCode\nmetadata_datasets %&gt;%\n  filter(owner == \"OpenDataAdmin_detroitmi\") %&gt;%\n  select(-owner) %&gt;%\n #  knitr::kable()\n  datatable()"
  },
  {
    "objectID": "posts/data-set-metadata-2023-08-09/index.html#data-sets-owned-by-others",
    "href": "posts/data-set-metadata-2023-08-09/index.html#data-sets-owned-by-others",
    "title": "Data Set Metadata",
    "section": "Data Sets owned by others",
    "text": "Data Sets owned by others\n\n\nCode\nmetadata_datasets %&gt;%\n  filter(owner != \"OpenDataAdmin_detroitmi\") %&gt;%\n # select(-owner) %&gt;%\n #  knitr::kable()\n  datatable()"
  },
  {
    "objectID": "posts/data-set-metadata-2023-08-09/index.html#data-updated-7-31-2023",
    "href": "posts/data-set-metadata-2023-08-09/index.html#data-updated-7-31-2023",
    "title": "Data Set Metadata",
    "section": "",
    "text": "Code\nmetadata_datasets_all &lt;- \n  tbl(con, in_schema(\"dbt_metadata\", \"datasets\")) %&gt;%\n# select(layer_name, type, service_item_id, description, ) %&gt;%\n#  arrange(layer_name) %&gt;%\n  collect()\n\n\n\n\nCode\nmetadata_datasets &lt;- metadata_datasets_all %&gt;% \n  mutate(desc_words = str_count(description, \"\\\\w+\"),\n                                 snippet_words = str_count(snippet, \"\\\\w+\"),\n                                 credit_words = str_count(access_information, \"\\\\w+\"),\n                                 tags = str_split(str_remove_all(tags, '\\\\{|\\\\}'), \",\")) %&gt;%\n  mutate(tag_words = (unlist(lengths(tags)))) %&gt;%\n  select(feature_service_name, owner, desc_words, snippet_words, tag_words, credit_words, creation_date) %&gt;%\n  arrange(feature_service_name)"
  },
  {
    "objectID": "posts/column-metadata-2023-08-28/index.html",
    "href": "posts/column-metadata-2023-08-28/index.html",
    "title": "Column Metadata",
    "section": "",
    "text": "data updated 08-28-2023\nJuly count: 219"
  },
  {
    "objectID": "posts/column-metadata-2023-08-28/index.html#data-notes",
    "href": "posts/column-metadata-2023-08-28/index.html#data-notes",
    "title": "Column Metadata",
    "section": "",
    "text": "data updated 08-28-2023\nJuly count: 219"
  },
  {
    "objectID": "posts/column-metadata-2023-08-28/index.html#overview-all-columns",
    "href": "posts/column-metadata-2023-08-28/index.html#overview-all-columns",
    "title": "Column Metadata",
    "section": "Overview: All Columns",
    "text": "Overview: All Columns\nFiltered out rows that matched\n\ntype = “esriFieldTypeOID”\nfeature_service_name = “Review”\n\nFuture\n\njoin on feature_service_name to identify which are owned by OpenDataAdmin and which are not\nmaybe drop deprecated data sets\n\n\n\nCode\nmetadata_columns_all %&gt;%\n  filter(type != \"esriFieldTypeOID\") %&gt;%\n  filter(feature_service_name != \"Review\") %&gt;%\n  mutate(column_label = if_else(field_name != field_alias, field_alias, NA)) %&gt;%\n  select(-c(feature_service_name, layer_name, field_name, field_alias, type)) %&gt;%\n  skim(.data_name = \"column-level metadata\")\n\n\n\nData summary\n\n\nName\ncolumn-level metadata\n\n\nNumber of rows\n1854\n\n\nNumber of columns\n3\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\ndescription\n1551\n0.16\n0\n510\n5\n248\n0\n\n\nfield_value_type\n1551\n0.16\n0\n19\n101\n13\n0\n\n\ncolumn_label\n1319\n0.29\n0\n48\n3\n376\n0\n\n\n\n\n\nKey\n\nn_missing: Sum of NA and NULL (i.e. missing) values.\ncomplete rate: Sum of values that are not NA or NULL (i.e., missing) values.\nmin: minimum number of characters.\nmax: maximum number of characters.\nempty: number of blank values - or empty strings (““).\nn_unique: number of unique values.\nwhitespace: number of rows containing only whitespace values using the s+ regular expression."
  },
  {
    "objectID": "posts/column-metadata-2023-08-28/index.html#column-level-metadata-grouped-by-data-set",
    "href": "posts/column-metadata-2023-08-28/index.html#column-level-metadata-grouped-by-data-set",
    "title": "Column Metadata",
    "section": "Column-level Metadata, Grouped by Data Set",
    "text": "Column-level Metadata, Grouped by Data Set\nColumns counts summarized by data set to identify the number of columns (‘column_count’), the number of columns that do not yet have descriptions (‘to_describe’) and the proportion of columns that have been described.\nThe identifier column created and assigned by Esri (column data type = “esriFieldTypeOID”) is not included in the counts.\n\n\nCode\nmetadata_columns_all %&gt;%\n # select(feature_service_name, field_name, field_alias, field_value_type, description) %&gt;%\n  group_by(feature_service_name) %&gt;%\n#  tally(name = \"column count\") %&gt;%\n  summarise(column_count = n()-1, to_describe = sum(is.na(description))-1 , pct_complete = round((((column_count-to_describe)/column_count)*100), digits = 2), .groups = 'keep') %&gt;%\n  datatable()\n\n\n\n\n\n\n\nCode\n#  summarise(descriptions = n(description))"
  },
  {
    "objectID": "posts/column-metadata-2023-08-28/index.html#search-column-level-metadata",
    "href": "posts/column-metadata-2023-08-28/index.html#search-column-level-metadata",
    "title": "Column Metadata",
    "section": "Search Column-level Metadata",
    "text": "Search Column-level Metadata\nTable that lists the data set, field name, field alias, field value type, and description for each column - or attribute - in odp data sets. Each row is a data set attribute (a.k.a. ‘column’).\n\n\nCode\nmetadata_columns_all %&gt;%\n  select(feature_service_name, field_name, field_alias, field_value_type, description) %&gt;%\n  arrange(feature_service_name) %&gt;%\n  datatable()"
  },
  {
    "objectID": "posts/data-set-metadata-2023-08-28/index.html",
    "href": "posts/data-set-metadata-2023-08-28/index.html",
    "title": "Data Set Metadata",
    "section": "",
    "text": "data updated 08-28-2023\nJuly count: 42\n\n\nCode\nmetadata_datasets_all &lt;- \n  tbl(con, in_schema(\"dbt_metadata\", \"datasets\")) %&gt;%\n# select(layer_name, type, service_item_id, description, ) %&gt;%\n#  arrange(layer_name) %&gt;%\n  collect()\n\n\n\n\nCode\nmetadata_datasets_20230828 &lt;- metadata_datasets_all %&gt;% \n  mutate(desc_words = str_count(description, \"\\\\w+\"),\n                                 snippet_words = str_count(snippet, \"\\\\w+\"),\n                                 credit_words = str_count(access_information, \"\\\\w+\"),\n                                 tags = str_split(str_remove_all(tags, '\\\\{|\\\\}'), \",\")) %&gt;%\n  mutate(tag_words = (unlist(lengths(tags)))) %&gt;%\n  select(feature_service_name, owner, desc_words, snippet_words, tag_words, credit_words, creation_date) %&gt;%\n  arrange(feature_service_name)"
  },
  {
    "objectID": "posts/data-set-metadata-2023-08-28/index.html#data-updated-7-31-2023",
    "href": "posts/data-set-metadata-2023-08-28/index.html#data-updated-7-31-2023",
    "title": "Data Set Metadata",
    "section": "",
    "text": "Code\nmetadata_datasets_all &lt;- \n  tbl(con, in_schema(\"dbt_metadata\", \"datasets\")) %&gt;%\n# select(layer_name, type, service_item_id, description, ) %&gt;%\n#  arrange(layer_name) %&gt;%\n  collect()\n\n\n\n\nCode\nmetadata_datasets &lt;- metadata_datasets_all %&gt;% \n  mutate(desc_words = str_count(description, \"\\\\w+\"),\n                                 snippet_words = str_count(snippet, \"\\\\w+\"),\n                                 credit_words = str_count(access_information, \"\\\\w+\"),\n                                 tags = str_split(str_remove_all(tags, '\\\\{|\\\\}'), \",\")) %&gt;%\n  mutate(tag_words = (unlist(lengths(tags)))) %&gt;%\n  select(feature_service_name, owner, desc_words, snippet_words, tag_words, credit_words, creation_date) %&gt;%\n  arrange(feature_service_name)"
  },
  {
    "objectID": "posts/data-set-metadata-2023-08-28/index.html#all-data-sets",
    "href": "posts/data-set-metadata-2023-08-28/index.html#all-data-sets",
    "title": "Data Set Metadata",
    "section": "All Data Sets",
    "text": "All Data Sets\nItem count: 156\n\n\nCode\nlibrary(skimr)\n\nmetadata_datasets_20230828 %&gt;%\n    skim(.data_name = \"dataset-level metadata\")\n\n\n\nData summary\n\n\nName\ndataset-level metadata\n\n\nNumber of rows\n156\n\n\nNumber of columns\n7\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\nnumeric\n4\n\n\nPOSIXct\n1\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nfeature_service_name\n0\n1\n3\n60\n0\n156\n0\n\n\nowner\n0\n1\n15\n32\n0\n16\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\ndesc_words\n13\n0.92\n66.34\n97.62\n5\n13.5\n31\n87.5\n751\n▇▁▁▁▁\n\n\nsnippet_words\n0\n1.00\n11.40\n7.04\n0\n6.0\n10\n15.0\n38\n▆▇▃▁▁\n\n\ntag_words\n0\n1.00\n3.54\n1.45\n1\n3.0\n3\n4.0\n9\n▃▇▂▁▁\n\n\ncredit_words\n0\n1.00\n2.61\n5.37\n0\n0.0\n0\n4.0\n48\n▇▁▁▁▁\n\n\n\nVariable type: POSIXct\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nmedian\nn_unique\n\n\n\n\ncreation_date\n0\n1\n2016-07-01 16:19:54\n2023-08-10 16:05:08\n2019-10-01 15:00:02\n150\n\n\n\n\n\nCode\n#  filter(type != \"esriFieldTypeOID\") %&gt;%\n#  filter(feature_service_name != \"Review\") %&gt;%\n#  mutate(column_label = if_else(field_name != field_alias, field_alias, NA)) %&gt;%\n#  select(-c(feature_service_name, layer_name, field_name, field_alias, type)) %&gt;%\n#  skim(.data_name = \"column-level metadata\")"
  },
  {
    "objectID": "posts/data-set-metadata-2023-08-28/index.html#opendataadmin-data-sets",
    "href": "posts/data-set-metadata-2023-08-28/index.html#opendataadmin-data-sets",
    "title": "Data Set Metadata",
    "section": "OpenDataAdmin Data Sets",
    "text": "OpenDataAdmin Data Sets\n\n\nCode\nmetadata_datasets_20230828 %&gt;%\n  filter(owner == \"OpenDataAdmin_detroitmi\") %&gt;%\n  select(-owner) %&gt;%\n #  knitr::kable()\n  datatable()"
  },
  {
    "objectID": "posts/data-set-metadata-2023-08-28/index.html#data-sets-owned-by-others",
    "href": "posts/data-set-metadata-2023-08-28/index.html#data-sets-owned-by-others",
    "title": "Data Set Metadata",
    "section": "Data Sets owned by others",
    "text": "Data Sets owned by others\n\n\nCode\nmetadata_datasets_20230828 %&gt;%\n  filter(owner != \"OpenDataAdmin_detroitmi\") %&gt;%\n # select(-owner) %&gt;%\n #  knitr::kable()\n  datatable()"
  },
  {
    "objectID": "posts/data-set-metadata-2023-08-28/index.html#data-notes",
    "href": "posts/data-set-metadata-2023-08-28/index.html#data-notes",
    "title": "Data Set Metadata",
    "section": "",
    "text": "data updated 08-28-2023\nJuly count: 42\n\n\nCode\nmetadata_datasets_all &lt;- \n  tbl(con, in_schema(\"dbt_metadata\", \"datasets\")) %&gt;%\n# select(layer_name, type, service_item_id, description, ) %&gt;%\n#  arrange(layer_name) %&gt;%\n  collect()\n\n\n\n\nCode\nmetadata_datasets_20230828 &lt;- metadata_datasets_all %&gt;% \n  mutate(desc_words = str_count(description, \"\\\\w+\"),\n                                 snippet_words = str_count(snippet, \"\\\\w+\"),\n                                 credit_words = str_count(access_information, \"\\\\w+\"),\n                                 tags = str_split(str_remove_all(tags, '\\\\{|\\\\}'), \",\")) %&gt;%\n  mutate(tag_words = (unlist(lengths(tags)))) %&gt;%\n  select(feature_service_name, owner, desc_words, snippet_words, tag_words, credit_words, creation_date) %&gt;%\n  arrange(feature_service_name)"
  },
  {
    "objectID": "posts/data-set-metadata-2023-09-26/index.html",
    "href": "posts/data-set-metadata-2023-09-26/index.html",
    "title": "Data Set Metadata",
    "section": "",
    "text": "data updated 09-25-2023\nJuly count: 42 August count: 51 September count: 54\n\n\nCode\nmetadata_datasets_all &lt;- \n  tbl(con, in_schema(\"dbt_metadata\", \"datasets\")) %&gt;%\n# select(layer_name, type, service_item_id, description, ) %&gt;%\n#  arrange(layer_name) %&gt;%\n  collect()\n\n\n\n\nCode\nmetadata_datasets_20230828 &lt;- metadata_datasets_all %&gt;% \n  mutate(desc_words = str_count(description, \"\\\\w+\"),\n                                 snippet_words = str_count(snippet, \"\\\\w+\"),\n                                 credit_words = str_count(access_information, \"\\\\w+\"),\n                                 tags = str_split(str_remove_all(tags, '\\\\{|\\\\}'), \",\")) %&gt;%\n  mutate(tag_words = (unlist(lengths(tags)))) %&gt;%\n  select(feature_service_name, owner, desc_words, snippet_words, tag_words, credit_words, creation_date) %&gt;%\n  arrange(feature_service_name)"
  },
  {
    "objectID": "posts/data-set-metadata-2023-09-26/index.html#data-notes",
    "href": "posts/data-set-metadata-2023-09-26/index.html#data-notes",
    "title": "Data Set Metadata",
    "section": "",
    "text": "data updated 09-25-2023\nJuly count: 42 August count: 51 September count: 54\n\n\nCode\nmetadata_datasets_all &lt;- \n  tbl(con, in_schema(\"dbt_metadata\", \"datasets\")) %&gt;%\n# select(layer_name, type, service_item_id, description, ) %&gt;%\n#  arrange(layer_name) %&gt;%\n  collect()\n\n\n\n\nCode\nmetadata_datasets_20230828 &lt;- metadata_datasets_all %&gt;% \n  mutate(desc_words = str_count(description, \"\\\\w+\"),\n                                 snippet_words = str_count(snippet, \"\\\\w+\"),\n                                 credit_words = str_count(access_information, \"\\\\w+\"),\n                                 tags = str_split(str_remove_all(tags, '\\\\{|\\\\}'), \",\")) %&gt;%\n  mutate(tag_words = (unlist(lengths(tags)))) %&gt;%\n  select(feature_service_name, owner, desc_words, snippet_words, tag_words, credit_words, creation_date) %&gt;%\n  arrange(feature_service_name)"
  },
  {
    "objectID": "posts/data-set-metadata-2023-09-26/index.html#all-data-sets",
    "href": "posts/data-set-metadata-2023-09-26/index.html#all-data-sets",
    "title": "Data Set Metadata",
    "section": "All Data Sets",
    "text": "All Data Sets\nItem count: 162\n\n\nCode\nlibrary(skimr)\n\nmetadata_datasets_20230828 %&gt;%\n    skim(.data_name = \"dataset-level metadata\")\n\n\n\nData summary\n\n\nName\ndataset-level metadata\n\n\nNumber of rows\n162\n\n\nNumber of columns\n7\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\nnumeric\n4\n\n\nPOSIXct\n1\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nfeature_service_name\n0\n1\n3\n60\n0\n158\n0\n\n\nowner\n0\n1\n15\n32\n0\n16\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\ndesc_words\n14\n0.91\n74.51\n118.44\n5\n14\n32\n89.25\n751\n▇▁▁▁▁\n\n\nsnippet_words\n0\n1.00\n11.25\n6.97\n0\n6\n10\n14.00\n38\n▆▇▃▁▁\n\n\ntag_words\n0\n1.00\n3.49\n1.45\n1\n3\n3\n4.00\n9\n▃▇▂▁▁\n\n\ncredit_words\n0\n1.00\n2.67\n5.33\n0\n0\n0\n4.00\n48\n▇▁▁▁▁\n\n\n\nVariable type: POSIXct\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nmedian\nn_unique\n\n\n\n\ncreation_date\n0\n1\n2016-07-01 16:19:54\n2023-08-10 16:05:08\n2019-12-04 06:00:50\n152\n\n\n\n\n\nCode\n#  filter(type != \"esriFieldTypeOID\") %&gt;%\n#  filter(feature_service_name != \"Review\") %&gt;%\n#  mutate(column_label = if_else(field_name != field_alias, field_alias, NA)) %&gt;%\n#  select(-c(feature_service_name, layer_name, field_name, field_alias, type)) %&gt;%\n#  skim(.data_name = \"column-level metadata\")"
  },
  {
    "objectID": "posts/data-set-metadata-2023-09-26/index.html#opendataadmin-data-sets",
    "href": "posts/data-set-metadata-2023-09-26/index.html#opendataadmin-data-sets",
    "title": "Data Set Metadata",
    "section": "OpenDataAdmin Data Sets",
    "text": "OpenDataAdmin Data Sets\n\n\nCode\nmetadata_datasets_20230828 %&gt;%\n  filter(owner == \"OpenDataAdmin_detroitmi\") %&gt;%\n  select(-owner) %&gt;%\n #  knitr::kable()\n  datatable()"
  },
  {
    "objectID": "posts/data-set-metadata-2023-09-26/index.html#data-sets-owned-by-others",
    "href": "posts/data-set-metadata-2023-09-26/index.html#data-sets-owned-by-others",
    "title": "Data Set Metadata",
    "section": "Data Sets owned by others",
    "text": "Data Sets owned by others\n\n\nCode\nmetadata_datasets_20230828 %&gt;%\n  filter(owner != \"OpenDataAdmin_detroitmi\") %&gt;%\n # select(-owner) %&gt;%\n #  knitr::kable()\n  datatable()"
  },
  {
    "objectID": "posts/column-metadata-2023-09-26/index.html",
    "href": "posts/column-metadata-2023-09-26/index.html",
    "title": "Column Metadata",
    "section": "",
    "text": "data updated 09-25-2023\nJuly count: 219 August count: 303 September count: 366"
  },
  {
    "objectID": "posts/column-metadata-2023-09-26/index.html#data-notes",
    "href": "posts/column-metadata-2023-09-26/index.html#data-notes",
    "title": "Column Metadata",
    "section": "",
    "text": "data updated 09-25-2023\nJuly count: 219 August count: 303 September count: 366"
  },
  {
    "objectID": "posts/column-metadata-2023-09-26/index.html#overview-all-columns",
    "href": "posts/column-metadata-2023-09-26/index.html#overview-all-columns",
    "title": "Column Metadata",
    "section": "Overview: All Columns",
    "text": "Overview: All Columns\nFiltered out rows that matched\n\ntype = “esriFieldTypeOID”\nfeature_service_name = “Review”\n\nFuture\n\njoin on feature_service_name to identify which are owned by OpenDataAdmin and which are not\nmaybe drop deprecated data sets\n\n\n\nCode\nmetadata_columns_all %&gt;%\n  filter(type != \"esriFieldTypeOID\") %&gt;%\n  filter(feature_service_name != \"Review\") %&gt;%\n  mutate(column_label = if_else(field_name != field_alias, field_alias, NA)) %&gt;%\n  select(-c(feature_service_name, layer_name, field_name, field_alias, type)) %&gt;%\n  skim(.data_name = \"column-level metadata\")\n\n\n\nData summary\n\n\nName\ncolumn-level metadata\n\n\nNumber of rows\n1944\n\n\nNumber of columns\n3\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\ndescription\n1553\n0.20\n0\n510\n5\n328\n0\n\n\nfield_value_type\n1553\n0.20\n0\n19\n63\n15\n0\n\n\ncolumn_label\n1303\n0.33\n0\n48\n3\n449\n0\n\n\n\n\n\nKey\n\nn_missing: Sum of NA and NULL (i.e. missing) values.\ncomplete rate: Sum of values that are not NA or NULL (i.e., missing) values.\nmin: minimum number of characters.\nmax: maximum number of characters.\nempty: number of blank values - or empty strings (““).\nn_unique: number of unique values.\nwhitespace: number of rows containing only whitespace values using the s+ regular expression."
  },
  {
    "objectID": "posts/column-metadata-2023-09-26/index.html#column-level-metadata-grouped-by-data-set",
    "href": "posts/column-metadata-2023-09-26/index.html#column-level-metadata-grouped-by-data-set",
    "title": "Column Metadata",
    "section": "Column-level Metadata, Grouped by Data Set",
    "text": "Column-level Metadata, Grouped by Data Set\nColumns counts summarized by data set to identify the number of columns (‘column_count’), the number of columns that do not yet have descriptions (‘to_describe’) and the proportion of columns that have been described.\nThe identifier column created and assigned by Esri (column data type = “esriFieldTypeOID”) is not included in the counts.\n\n\nCode\nmetadata_columns_all %&gt;%\n # select(feature_service_name, field_name, field_alias, field_value_type, description) %&gt;%\n  group_by(feature_service_name) %&gt;%\n#  tally(name = \"column count\") %&gt;%\n  summarise(column_count = n()-1, to_describe = sum(is.na(description))-1 , pct_complete = round((((column_count-to_describe)/column_count)*100), digits = 2), .groups = 'keep') %&gt;%\n  datatable()\n\n\n\n\n\n\n\nCode\n#  summarise(descriptions = n(description))"
  },
  {
    "objectID": "posts/column-metadata-2023-09-26/index.html#search-column-level-metadata",
    "href": "posts/column-metadata-2023-09-26/index.html#search-column-level-metadata",
    "title": "Column Metadata",
    "section": "Search Column-level Metadata",
    "text": "Search Column-level Metadata\nTable that lists the data set, field name, field alias, field value type, and description for each column - or attribute - in odp data sets. Each row is a data set attribute (a.k.a. ‘column’).\n\n\nCode\nmetadata_columns_all %&gt;%\n  select(feature_service_name, field_name, field_alias, field_value_type, description) %&gt;%\n  arrange(feature_service_name) %&gt;%\n  datatable()\n\n\n\n\n\n\n\n\nValid Column Metadata\nRetrieve columns that have a description included in column-level metadata and where that description is not the word “null”.\n\n\nCode\nmetadata_columns_all %&gt;%\n  select(feature_service_name, field_name, field_alias, field_value_type, description) %&gt;%\n  filter(str_length(description) &gt;1 & description != \"null\") %&gt;%\n  # filter(description == \"null\") %&gt;%\n  arrange(feature_service_name) %&gt;%\n  datatable()"
  },
  {
    "objectID": "posts/column-metadata-2023-10-27/index.html",
    "href": "posts/column-metadata-2023-10-27/index.html",
    "title": "Column Metadata",
    "section": "",
    "text": "data updated 10-27-2023\n\n\n\ndate\nmonth\ncount\n\n\n\n\n\nJuly\n219\n\n\n2023-08-28\nAugust\n303\n\n\n2023-09-26\nSeptember\n366\n\n\n2023-10-27\nOctober\n398"
  },
  {
    "objectID": "posts/column-metadata-2023-10-27/index.html#data-notes",
    "href": "posts/column-metadata-2023-10-27/index.html#data-notes",
    "title": "Column Metadata",
    "section": "",
    "text": "data updated 10-27-2023\n\n\n\ndate\nmonth\ncount\n\n\n\n\n\nJuly\n219\n\n\n2023-08-28\nAugust\n303\n\n\n2023-09-26\nSeptember\n366\n\n\n2023-10-27\nOctober\n398"
  },
  {
    "objectID": "posts/column-metadata-2023-10-27/index.html#overview-all-columns",
    "href": "posts/column-metadata-2023-10-27/index.html#overview-all-columns",
    "title": "Column Metadata",
    "section": "Overview: All Columns",
    "text": "Overview: All Columns\nFiltered out rows that matched\n\ntype = “esriFieldTypeOID”\nfeature_service_name = “Review”\n\nFuture\n\njoin on feature_service_name to identify which are owned by OpenDataAdmin and which are not\nmaybe drop deprecated data sets\n\n\n\nCode\nmetadata_columns_all %&gt;%\n  filter(type != \"esriFieldTypeOID\") %&gt;%\n  filter(feature_service_name != \"Review\") %&gt;%\n  mutate(column_label = if_else(field_name != field_alias, field_alias, NA)) %&gt;%\n  select(-c(feature_service_name, layer_name, field_name, field_alias, type)) %&gt;%\n  skim(.data_name = \"column-level metadata\")\n\n\n\nData summary\n\n\nName\ncolumn-level metadata\n\n\nNumber of rows\n1985\n\n\nNumber of columns\n3\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\ndescription\n1564\n0.21\n0\n510\n3\n358\n0\n\n\nfield_value_type\n1564\n0.21\n0\n19\n73\n15\n0\n\n\ncolumn_label\n1276\n0.36\n0\n48\n3\n466\n0\n\n\n\n\n\nKey\n\nn_missing: Sum of NA and NULL (i.e. missing) values.\ncomplete rate: Sum of values that are not NA or NULL (i.e., missing) values.\nmin: minimum number of characters.\nmax: maximum number of characters.\nempty: number of blank values - or empty strings (““).\nn_unique: number of unique values.\nwhitespace: number of rows containing only whitespace values using the s+ regular expression."
  },
  {
    "objectID": "posts/column-metadata-2023-10-27/index.html#column-level-metadata-grouped-by-data-set",
    "href": "posts/column-metadata-2023-10-27/index.html#column-level-metadata-grouped-by-data-set",
    "title": "Column Metadata",
    "section": "Column-level Metadata, Grouped by Data Set",
    "text": "Column-level Metadata, Grouped by Data Set\nColumns counts summarized by data set to identify the number of columns (‘column_count’), the number of columns that do not yet have descriptions (‘to_describe’) and the proportion of columns that have been described.\nThe identifier column created and assigned by Esri (column data type = “esriFieldTypeOID”) is not included in the counts.\n\n\nCode\nmetadata_columns_all %&gt;%\n # select(feature_service_name, field_name, field_alias, field_value_type, description) %&gt;%\n  group_by(feature_service_name) %&gt;%\n#  tally(name = \"column count\") %&gt;%\n  summarise(column_count = n()-1, to_describe = sum(is.na(description))-1 , pct_complete = round((((column_count-to_describe)/column_count)*100), digits = 2), .groups = 'keep') %&gt;%\n  datatable()\n\n\n\n\n\n\n\nCode\n#  summarise(descriptions = n(description))"
  },
  {
    "objectID": "posts/column-metadata-2023-10-27/index.html#search-column-level-metadata",
    "href": "posts/column-metadata-2023-10-27/index.html#search-column-level-metadata",
    "title": "Column Metadata",
    "section": "Search Column-level Metadata",
    "text": "Search Column-level Metadata\nTable that lists the data set, field name, field alias, field value type, and description for each column - or attribute - in odp data sets. Each row is a data set attribute (a.k.a. ‘column’).\n\n\nCode\nmetadata_columns_all %&gt;%\n  select(feature_service_name, field_name, field_alias, field_value_type, description) %&gt;%\n  arrange(feature_service_name) %&gt;%\n  datatable()\n\n\n\n\n\n\n\n\nValid Column Metadata\nRetrieve columns that have a description included in column-level metadata and where that description is not the word “null”.\n\n\nCode\nmetadata_columns_all %&gt;%\n  select(feature_service_name, field_name, field_alias, field_value_type, description) %&gt;%\n  filter(str_length(description) &gt;1 & description != \"null\") %&gt;%\n  # filter(description == \"null\") %&gt;%\n  arrange(feature_service_name) %&gt;%\n  datatable()"
  },
  {
    "objectID": "posts/data-set-metadata-2023-10-27/index.html",
    "href": "posts/data-set-metadata-2023-10-27/index.html",
    "title": "Data Set Metadata",
    "section": "",
    "text": "data updated 10-27-2023\n\n\n\ndate\nmonth\ncount\n\n\n\n\n\nJuly\n42\n\n\n2023-08-28\nAugust\n51\n\n\n2023-09-26\nSeptember\n54\n\n\n2023-10-27\nOctober\n56\n\n\n\n\n\nCode\nmetadata_datasets_all &lt;- \n  tbl(con, in_schema(\"dbt_metadata\", \"datasets\")) %&gt;%\n# select(layer_name, type, service_item_id, description, ) %&gt;%\n#  arrange(layer_name) %&gt;%\n  collect()\n\n\n\n\nCode\nmetadata_datasets_20230828 &lt;- metadata_datasets_all %&gt;% \n  mutate(desc_words = str_count(description, \"\\\\w+\"),\n                                 snippet_words = str_count(snippet, \"\\\\w+\"),\n                                 credit_words = str_count(access_information, \"\\\\w+\"),\n                                 tags = str_split(str_remove_all(tags, '\\\\{|\\\\}'), \",\")) %&gt;%\n  mutate(tag_words = (unlist(lengths(tags)))) %&gt;%\n  select(feature_service_name, owner, desc_words, snippet_words, tag_words, credit_words, creation_date) %&gt;%\n  arrange(feature_service_name)"
  },
  {
    "objectID": "posts/data-set-metadata-2023-10-27/index.html#data-notes",
    "href": "posts/data-set-metadata-2023-10-27/index.html#data-notes",
    "title": "Data Set Metadata",
    "section": "",
    "text": "data updated 10-27-2023\n\n\n\ndate\nmonth\ncount\n\n\n\n\n\nJuly\n42\n\n\n2023-08-28\nAugust\n51\n\n\n2023-09-26\nSeptember\n54\n\n\n2023-10-27\nOctober\n56\n\n\n\n\n\nCode\nmetadata_datasets_all &lt;- \n  tbl(con, in_schema(\"dbt_metadata\", \"datasets\")) %&gt;%\n# select(layer_name, type, service_item_id, description, ) %&gt;%\n#  arrange(layer_name) %&gt;%\n  collect()\n\n\n\n\nCode\nmetadata_datasets_20230828 &lt;- metadata_datasets_all %&gt;% \n  mutate(desc_words = str_count(description, \"\\\\w+\"),\n                                 snippet_words = str_count(snippet, \"\\\\w+\"),\n                                 credit_words = str_count(access_information, \"\\\\w+\"),\n                                 tags = str_split(str_remove_all(tags, '\\\\{|\\\\}'), \",\")) %&gt;%\n  mutate(tag_words = (unlist(lengths(tags)))) %&gt;%\n  select(feature_service_name, owner, desc_words, snippet_words, tag_words, credit_words, creation_date) %&gt;%\n  arrange(feature_service_name)"
  },
  {
    "objectID": "posts/data-set-metadata-2023-10-27/index.html#all-data-sets",
    "href": "posts/data-set-metadata-2023-10-27/index.html#all-data-sets",
    "title": "Data Set Metadata",
    "section": "All Data Sets",
    "text": "All Data Sets\nItem count: 163\n\n\nCode\nlibrary(skimr)\n\nmetadata_datasets_20230828 %&gt;%\n    skim(.data_name = \"dataset-level metadata\")\n\n\n\nData summary\n\n\nName\ndataset-level metadata\n\n\nNumber of rows\n163\n\n\nNumber of columns\n7\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\nnumeric\n4\n\n\nPOSIXct\n1\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nfeature_service_name\n0\n1\n3\n60\n0\n159\n0\n\n\nowner\n0\n1\n15\n32\n0\n17\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\ndesc_words\n14\n0.91\n74.54\n118.04\n5\n14\n33\n88\n751\n▇▁▁▁▁\n\n\nsnippet_words\n0\n1.00\n11.24\n6.95\n0\n6\n10\n14\n38\n▆▇▃▁▁\n\n\ntag_words\n0\n1.00\n3.50\n1.45\n1\n3\n3\n4\n9\n▃▇▂▁▁\n\n\ncredit_words\n0\n1.00\n2.72\n5.32\n0\n0\n0\n4\n48\n▇▁▁▁▁\n\n\n\nVariable type: POSIXct\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nmedian\nn_unique\n\n\n\n\ncreation_date\n0\n1\n2016-07-01 16:19:54\n2023-09-18 18:31:04\n2019-12-04 15:43:51\n153\n\n\n\n\n\nCode\n#  filter(type != \"esriFieldTypeOID\") %&gt;%\n#  filter(feature_service_name != \"Review\") %&gt;%\n#  mutate(column_label = if_else(field_name != field_alias, field_alias, NA)) %&gt;%\n#  select(-c(feature_service_name, layer_name, field_name, field_alias, type)) %&gt;%\n#  skim(.data_name = \"column-level metadata\")"
  },
  {
    "objectID": "posts/data-set-metadata-2023-10-27/index.html#opendataadmin-data-sets",
    "href": "posts/data-set-metadata-2023-10-27/index.html#opendataadmin-data-sets",
    "title": "Data Set Metadata",
    "section": "OpenDataAdmin Data Sets",
    "text": "OpenDataAdmin Data Sets\n\n\nCode\nmetadata_datasets_20230828 %&gt;%\n  filter(owner == \"OpenDataAdmin_detroitmi\") %&gt;%\n  select(-owner) %&gt;%\n #  knitr::kable()\n  datatable()"
  },
  {
    "objectID": "posts/data-set-metadata-2023-10-27/index.html#data-sets-owned-by-others",
    "href": "posts/data-set-metadata-2023-10-27/index.html#data-sets-owned-by-others",
    "title": "Data Set Metadata",
    "section": "Data Sets owned by others",
    "text": "Data Sets owned by others\n\n\nCode\nmetadata_datasets_20230828 %&gt;%\n  filter(owner != \"OpenDataAdmin_detroitmi\") %&gt;%\n # select(-owner) %&gt;%\n #  knitr::kable()\n  datatable()"
  },
  {
    "objectID": "posts/data-set-metadata-2023-11-28/index.html",
    "href": "posts/data-set-metadata-2023-11-28/index.html",
    "title": "Data Set Metadata",
    "section": "",
    "text": "data updated 11-28-2023\n\n\n\ndate\nmonth\ncount\n\n\n\n\n\nJuly\n42\n\n\n2023-08-28\nAugust\n51\n\n\n2023-09-26\nSeptember\n54\n\n\n2023-10-27\nOctober\n56\n\n\n2023-11-28\nNovember\n59\n\n\n\n\n\nCode\nmetadata_datasets_all &lt;- \n  tbl(con, in_schema(\"dbt_metadata\", \"datasets\")) %&gt;%\n# select(layer_name, type, service_item_id, description, ) %&gt;%\n#  arrange(layer_name) %&gt;%\n  collect()\n\n\n\n\nCode\nmetadata_datasets_20230828 &lt;- metadata_datasets_all %&gt;% \n  mutate(desc_words = str_count(description, \"\\\\w+\"),\n                                 snippet_words = str_count(snippet, \"\\\\w+\"),\n                                 credit_words = str_count(access_information, \"\\\\w+\"),\n                                 tags = str_split(str_remove_all(tags, '\\\\{|\\\\}'), \",\")) %&gt;%\n  mutate(tag_words = (unlist(lengths(tags)))) %&gt;%\n  select(feature_service_name, owner, desc_words, snippet_words, tag_words, credit_words, creation_date) %&gt;%\n  arrange(feature_service_name)"
  },
  {
    "objectID": "posts/data-set-metadata-2023-11-28/index.html#data-notes",
    "href": "posts/data-set-metadata-2023-11-28/index.html#data-notes",
    "title": "Data Set Metadata",
    "section": "",
    "text": "data updated 11-28-2023\n\n\n\ndate\nmonth\ncount\n\n\n\n\n\nJuly\n42\n\n\n2023-08-28\nAugust\n51\n\n\n2023-09-26\nSeptember\n54\n\n\n2023-10-27\nOctober\n56\n\n\n2023-11-28\nNovember\n59\n\n\n\n\n\nCode\nmetadata_datasets_all &lt;- \n  tbl(con, in_schema(\"dbt_metadata\", \"datasets\")) %&gt;%\n# select(layer_name, type, service_item_id, description, ) %&gt;%\n#  arrange(layer_name) %&gt;%\n  collect()\n\n\n\n\nCode\nmetadata_datasets_20230828 &lt;- metadata_datasets_all %&gt;% \n  mutate(desc_words = str_count(description, \"\\\\w+\"),\n                                 snippet_words = str_count(snippet, \"\\\\w+\"),\n                                 credit_words = str_count(access_information, \"\\\\w+\"),\n                                 tags = str_split(str_remove_all(tags, '\\\\{|\\\\}'), \",\")) %&gt;%\n  mutate(tag_words = (unlist(lengths(tags)))) %&gt;%\n  select(feature_service_name, owner, desc_words, snippet_words, tag_words, credit_words, creation_date) %&gt;%\n  arrange(feature_service_name)"
  },
  {
    "objectID": "posts/data-set-metadata-2023-11-28/index.html#all-data-sets",
    "href": "posts/data-set-metadata-2023-11-28/index.html#all-data-sets",
    "title": "Data Set Metadata",
    "section": "All Data Sets",
    "text": "All Data Sets\nItem count: 166\n\n\nCode\nlibrary(skimr)\n\nmetadata_datasets_20230828 %&gt;%\n    skim(.data_name = \"dataset-level metadata\")\n\n\n\nData summary\n\n\nName\ndataset-level metadata\n\n\nNumber of rows\n166\n\n\nNumber of columns\n7\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\nnumeric\n4\n\n\nPOSIXct\n1\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nfeature_service_name\n0\n1\n3\n60\n0\n161\n0\n\n\nowner\n0\n1\n15\n32\n0\n17\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\ndesc_words\n14\n0.92\n76.63\n117.70\n5\n15\n34\n95\n751\n▇▁▁▁▁\n\n\nsnippet_words\n0\n1.00\n11.42\n7.02\n0\n6\n10\n15\n38\n▆▇▃▁▁\n\n\ntag_words\n0\n1.00\n3.51\n1.44\n1\n3\n3\n4\n9\n▃▇▂▁▁\n\n\ncredit_words\n0\n1.00\n2.84\n5.46\n0\n0\n0\n4\n48\n▇▁▁▁▁\n\n\n\nVariable type: POSIXct\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nmedian\nn_unique\n\n\n\n\ncreation_date\n0\n1\n2016-07-01 16:19:54\n2023-09-18 18:31:04\n2019-12-14 05:31:43\n155\n\n\n\n\n\nCode\n#  filter(type != \"esriFieldTypeOID\") %&gt;%\n#  filter(feature_service_name != \"Review\") %&gt;%\n#  mutate(column_label = if_else(field_name != field_alias, field_alias, NA)) %&gt;%\n#  select(-c(feature_service_name, layer_name, field_name, field_alias, type)) %&gt;%\n#  skim(.data_name = \"column-level metadata\")"
  },
  {
    "objectID": "posts/data-set-metadata-2023-11-28/index.html#opendataadmin-data-sets",
    "href": "posts/data-set-metadata-2023-11-28/index.html#opendataadmin-data-sets",
    "title": "Data Set Metadata",
    "section": "OpenDataAdmin Data Sets",
    "text": "OpenDataAdmin Data Sets\n\n\nCode\nmetadata_datasets_20230828 %&gt;%\n  filter(owner == \"OpenDataAdmin_detroitmi\") %&gt;%\n  select(-owner) %&gt;%\n #  knitr::kable()\n  datatable()"
  },
  {
    "objectID": "posts/data-set-metadata-2023-11-28/index.html#data-sets-owned-by-others",
    "href": "posts/data-set-metadata-2023-11-28/index.html#data-sets-owned-by-others",
    "title": "Data Set Metadata",
    "section": "Data Sets owned by others",
    "text": "Data Sets owned by others\n\n\nCode\nmetadata_datasets_20230828 %&gt;%\n  filter(owner != \"OpenDataAdmin_detroitmi\") %&gt;%\n # select(-owner) %&gt;%\n #  knitr::kable()\n  datatable()"
  },
  {
    "objectID": "posts/column-metadata-2023-11-28/index.html",
    "href": "posts/column-metadata-2023-11-28/index.html",
    "title": "Column Metadata",
    "section": "",
    "text": "data updated 11-28-2023\n\n\n\ndate\nmonth\ncount\n\n\n\n\n\nJuly\n219\n\n\n2023-08-28\nAugust\n303\n\n\n2023-09-26\nSeptember\n366\n\n\n2023-10-27\nOctober\n398\n\n\n2023-11-28\nNovember\n484"
  },
  {
    "objectID": "posts/column-metadata-2023-11-28/index.html#data-notes",
    "href": "posts/column-metadata-2023-11-28/index.html#data-notes",
    "title": "Column Metadata",
    "section": "",
    "text": "data updated 11-28-2023\n\n\n\ndate\nmonth\ncount\n\n\n\n\n\nJuly\n219\n\n\n2023-08-28\nAugust\n303\n\n\n2023-09-26\nSeptember\n366\n\n\n2023-10-27\nOctober\n398\n\n\n2023-11-28\nNovember\n484"
  },
  {
    "objectID": "posts/column-metadata-2023-11-28/index.html#overview-all-columns",
    "href": "posts/column-metadata-2023-11-28/index.html#overview-all-columns",
    "title": "Column Metadata",
    "section": "Overview: All Columns",
    "text": "Overview: All Columns\nFiltered out rows that matched\n\ntype = “esriFieldTypeOID”\nfeature_service_name = “Review”\n\nFuture\n\njoin on feature_service_name to identify which are owned by OpenDataAdmin and which are not\nmaybe drop deprecated data sets\n\n\n\nCode\nmetadata_columns_all %&gt;%\n  filter(type != \"esriFieldTypeOID\") %&gt;%\n  filter(feature_service_name != \"Review\") %&gt;%\n  mutate(column_label = if_else(field_name != field_alias, field_alias, NA)) %&gt;%\n  select(-c(feature_service_name, layer_name, field_name, field_alias, type)) %&gt;%\n  skim(.data_name = \"column-level metadata\")\n\n\n\nData summary\n\n\nName\ncolumn-level metadata\n\n\nNumber of rows\n2063\n\n\nNumber of columns\n3\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\ndescription\n1555\n0.25\n0\n510\n4\n385\n0\n\n\nfield_value_type\n1555\n0.25\n0\n19\n78\n15\n0\n\n\ncolumn_label\n1276\n0.38\n0\n48\n3\n484\n0\n\n\n\n\n\nKey\n\nn_missing: Sum of NA and NULL (i.e. missing) values.\ncomplete rate: Sum of values that are not NA or NULL (i.e., missing) values.\nmin: minimum number of characters.\nmax: maximum number of characters.\nempty: number of blank values - or empty strings (““).\nn_unique: number of unique values.\nwhitespace: number of rows containing only whitespace values using the s+ regular expression."
  },
  {
    "objectID": "posts/column-metadata-2023-11-28/index.html#column-level-metadata-grouped-by-data-set",
    "href": "posts/column-metadata-2023-11-28/index.html#column-level-metadata-grouped-by-data-set",
    "title": "Column Metadata",
    "section": "Column-level Metadata, Grouped by Data Set",
    "text": "Column-level Metadata, Grouped by Data Set\nColumns counts summarized by data set to identify the number of columns (‘column_count’), the number of columns that do not yet have descriptions (‘to_describe’) and the proportion of columns that have been described.\nThe identifier column created and assigned by Esri (column data type = “esriFieldTypeOID”) is not included in the counts.\n\n\nCode\nmetadata_columns_all %&gt;%\n # select(feature_service_name, field_name, field_alias, field_value_type, description) %&gt;%\n  group_by(feature_service_name) %&gt;%\n#  tally(name = \"column count\") %&gt;%\n  summarise(column_count = n()-1, to_describe = sum(is.na(description))-1 , pct_complete = round((((column_count-to_describe)/column_count)*100), digits = 2), .groups = 'keep') %&gt;%\n  datatable()\n\n\n\n\n\n\n\nCode\n#  summarise(descriptions = n(description))"
  },
  {
    "objectID": "posts/column-metadata-2023-11-28/index.html#search-column-level-metadata",
    "href": "posts/column-metadata-2023-11-28/index.html#search-column-level-metadata",
    "title": "Column Metadata",
    "section": "Search Column-level Metadata",
    "text": "Search Column-level Metadata\nTable that lists the data set, field name, field alias, field value type, and description for each column - or attribute - in odp data sets. Each row is a data set attribute (a.k.a. ‘column’).\n\n\nCode\nmetadata_columns_all %&gt;%\n  select(feature_service_name, field_name, field_alias, field_value_type, description) %&gt;%\n  arrange(feature_service_name) %&gt;%\n  datatable()\n\n\n\n\n\n\n\n\nValid Column Metadata\nRetrieve columns that have a description included in column-level metadata and where that description is not the word “null”.\n\n\nCode\nmetadata_columns_all %&gt;%\n  select(feature_service_name, field_name, field_alias, field_value_type, description) %&gt;%\n  filter(str_length(description) &gt;1 & description != \"null\") %&gt;%\n  # filter(description == \"null\") %&gt;%\n  arrange(feature_service_name) %&gt;%\n  datatable()"
  }
]